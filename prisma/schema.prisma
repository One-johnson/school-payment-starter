generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id          String   @id @default(cuid())
  trackingId  String   @unique
  clerkUserId String   @unique
  name        String
  email       String   @unique
  role        Role
  createdAt   DateTime @default(now())

  // Relations
  student  Student?
  teacher  Teacher?
  payments Payment[]
}

model Student {
  id           String  @id
  user         User    @relation(fields: [id], references: [id])
  parentPhone  String?
  guardianName String?
  healthNotes  String?
  isRepeating  Boolean @default(false)

  // ðŸ”§ One-to-many relation (e.g. primary class)
  classId String?
  class   Class?  @relation("PrimaryClass", fields: [classId], references: [id])

  // ðŸ”§ Many-to-many enrollment
  enrolledIn Class[] @relation("StudentClass")
}

model Teacher {
  id                String  @id // Matches User.id
  user              User    @relation(fields: [id], references: [id])
  bio               String?
  certification     String?
  yearsOfExperience Int?

  // Class Relations
  teaches Class[] @relation("ClassTeacher")
}

model Class {
  id         String   @id @default(cuid())
  trackingId String   @unique
  name       String   @unique
  createdAt  DateTime @default(now())

  // ðŸ”§ Match the one-to-many
  studentsSingle Student[] @relation("PrimaryClass")

  // ðŸ”§ Match the many-to-many
  students Student[] @relation("StudentClass")

  teacherId String?
  teacher   Teacher? @relation("ClassTeacher", fields: [teacherId], references: [id])
}

model Payment {
  id         String        @id @default(cuid())
  trackingId String        @unique
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  amount     Float
  status     PaymentStatus @default(PENDING)
  reference  String        @unique
  createdAt  DateTime      @default(now())
}

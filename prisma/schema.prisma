generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id          String   @id @default(cuid())
  trackingId  String   @unique
  clerkUserId String   @unique
  name        String
  email       String   @unique
  role        Role
  createdAt   DateTime @default(now())

  // Role-specific relations
  student  Student?
  teacher  Teacher?
  payments Payment[]
}

model Class {
  id         String   @id // custom ID like "CLS_xyz"
  trackingId String   @unique
  name       String   @unique
  createdAt  DateTime @default(now())

  students  Student[]
  teacherId String?
  teacher   Teacher?  @relation("ClassTeacher", fields: [teacherId], references: [userId])
  Payment   Payment[]
}

model Student {
  userId String @id // same as User.id, no default
  user   User   @relation(fields: [userId], references: [id])

  parentPhone  String?
  guardianName String?
  healthNotes  String?
  isRepeating  Boolean @default(false)

  classId String
  class   Class     @relation(fields: [classId], references: [id])
  Payment Payment[]
}

model Teacher {
  userId String @id // same as User.id, no default
  user   User   @relation(fields: [userId], references: [id])

  bio               String?
  certification     String?
  yearsOfExperience Int?

  teaches Class[] @relation("ClassTeacher")
}

model Payment {
  id         String        @id
  trackingId String        @unique
  reference  String        @unique
  amount     Float
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime      @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  // NEW RELATION FIELDS
  studentId String?
  student   Student? @relation(fields: [studentId], references: [userId])
  classId   String?
  class     Class?   @relation(fields: [classId], references: [id])
  termId    String?
  term      Term?    @relation(fields: [termId], references: [id])
}

model Term {
  id        String   @id // custom ID like "TERM_2024S1"
  name      String   @unique // e.g. "2024 - First Semester"
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  // Payments associated with this term
  payments Payment[]
}
